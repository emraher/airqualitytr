% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download_air_quality_data.R
\name{download_air_quality_data}
\alias{download_air_quality_data}
\title{Download Air Quality Data with Additional Objects}
\usage{
download_air_quality_data(
  station_id,
  parameters,
  start_datetime,
  end_datetime,
  frequency = c("hourly", "daily"),
  return_all = FALSE
)
}
\arguments{
\item{station_id}{A character string with the station's unique identifier.}

\item{parameters}{A character vector of pollutant parameters (e.g., \code{c("PM10", "CO", "NO2")}).}

\item{start_datetime}{Start date-time in "YYYY-MM-DD HH:MM" format.}

\item{end_datetime}{End date-time in "YYYY-MM-DD HH:MM" format.}

\item{frequency}{Either \code{"hourly"} or \code{"daily"}. Default is \code{"hourly"}.}

\item{return_all}{Logical. If \code{TRUE} (default), a named list with elements \code{data},
\code{summaries}, \code{monitors}, \code{stations}, and \code{options} is returned.
If \code{FALSE}, only the tidied time series data is returned.}
}
\value{
If \code{return_all = TRUE}, a named list with the following elements:
\describe{
\item{data}{A tibble with the time series measurements (columns include \code{time},
\code{station_id}, \code{city_name}, \code{station_name}, \code{parameter}, and \code{value}).
All column names are in snake_case format.}
\item{summaries}{A tibble with summary data (if available; otherwise an empty tibble).
Column names are in snake_case format.}
\item{monitors}{A tibble with monitors metadata (if available; otherwise an empty tibble).
Column names are in snake_case format.}
\item{stations}{A tibble with station metadata (if available; otherwise an empty tibble).
Column names are in snake_case format.}
\item{options}{A tibble with available parameter/option settings (if available; otherwise empty).
Column names are in snake_case format.}
}
If \code{return_all = FALSE}, only the \code{data} tibble is returned with snake_case column names.
}
\description{
Downloads time series air quality data for a specified station by simulating a form POST
request to the Turkish Ministry's air quality data service. In addition to retrieving the
raw time series (from the "Data" object), this function attempts to extract any other objects
present in the JSON response (such as "Summaries", "Monitors", "StationIds", and "Parameters").
Station and city names are automatically retrieved from the metadata.
}
